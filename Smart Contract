use anchor_lang::prelude::*;
use anchor_spl::token::{
    self, Burn, Mint, Token, TokenAccount, Transfer,
};
use std::cmp;

// ---------------------------
//  Constants & Errors
// ---------------------------

/// The official $CHRCH token Mint address.
pub const CHRCH_MINT_PUBKEY: &str = "Gk8neJFkvW1Cvm8ZrmpVDhnfBRkFQ5Tny1PRwDcqNz6H";

/// Tickets must be in multiples of 100 $CHRCH.
pub const TICKET_COST: u64 = 100_000_000; // If $CHRCH has 6 decimals, e.g. 100.0 is 100_000_000 base units.

// Approximation: 1 year = 100 epochs for claim expiry.
pub const CLAIM_EXPIRY_EPOCHS: u64 = 100;

// Burn address for $CHRCH.
pub const CHRCH_BURN_ADDRESS: &str = "SomeBurnAddress11111111111111111111111111";

#[error_code]
pub enum LotteryError {
    #[msg("Invalid token account provided (must be $CHRCH).")]
    InvalidTokenError,
    #[msg("Amount must be a multiple of 100 $CHRCH.")]
    WrongMultipleError,
    #[msg("No tickets to draw from or fewer than 3 tickets sold.")]
    InsufficientTickets,
    #[msg("Prize already claimed or no prize for this user.")]
    NoPrizeAvailable,
    #[msg("Claim deadline exceeded; prize is burned.")]
    PrizeExpired,
    #[msg("Chainlink VRF unavailable or RNG request failed.")]
    RngFailure,
    // ... add more as needed
}

// ---------------------------
//  Program & Accounts
// ---------------------------

#[program]
pub mod chrch_lottery {
    use super::*;

    /// User deposits $CHRCH to buy tickets (in multiples of 100).
    pub fn buy_ticket(ctx: Context<BuyTicket>, amount: u64) -> Result<()> {
        let state = &mut ctx.accounts.lottery_state;

        // 1) Validate token mint
        if ctx.accounts.deposit_token_account.mint != state.chrch_mint.key() {
            return err!(LotteryError::InvalidTokenError);
        }
        // 2) Check amount multiple
        if amount % TICKET_COST != 0 {
            return err!(LotteryError::WrongMultipleError);
        }

        // Transfer tokens from user to vault
        token::transfer(
            ctx.accounts.transfer_ctx(),
            amount,
        )?;

        // Increment ticket count
        let ticket_count = amount / TICKET_COST;
        let buyer_stats = state
            .players
            .iter_mut()
            .find(|p| p.player == ctx.accounts.user.key());
        if let Some(buyer) = buyer_stats {
            buyer.tickets += ticket_count;
        } else {
            state.players.push(PlayerInfo {
                player: ctx.accounts.user.key(),
                tickets: ticket_count,
            });
        }

        // Update total tickets count and pot
        state.total_tickets += ticket_count;
        state.total_chrch_in_pot += amount;

        Ok(())
    }

    /// Called by the off-chain keeper after 3 epochs to initiate the draw.
    /// If fewer than 3 tickets, burn everything and reset.
    /// Otherwise, request randomness from Chainlink VRF.
    pub fn request_draw(ctx: Context<RequestDraw>) -> Result<()> {
        let state = &mut ctx.accounts.lottery_state;
        if state.total_tickets < 3 {
            // Burn entire pot
            burn_tokens(
                &ctx.accounts.vault,
                &ctx.accounts.token_program,
                &ctx.accounts.lottery_state,
                state.total_chrch_in_pot,
            )?;
            // Emit event
            emit!(DrawCancelled {
                epoch: state.current_epoch,
                burned_amount: state.total_chrch_in_pot,
            });

            // Reset state for next cycle
            reset_state(state)?;
            return Ok(());
        }

        // 1) Pay the VRF fee in SOL from the caller's wallet or a designated wallet
        //    (Implementation specific â€” e.g. an instruction to fund the VRF account)

        // 2) Make a VRF request
        //    In practice, you'd call the Chainlink VRF client program here.
        //    We'll just store a placeholder state indicating we are waiting for VRF.
        state.vrf_in_progress = true;

        Ok(())
    }

    /// VRF callback after randomness is provided.
    /// We'll use the random values to select 1st, 2nd, and 3rd place winners.
    pub fn fulfill_randomness(ctx: Context<FulfillRandomness>, randomness: u64) -> Result<()> {
        let state = &mut ctx.accounts.lottery_state;
        require!(state.vrf_in_progress, LotteryError::RngFailure);

        // Select winners
        // The simplest approach: 
        // 1) Generate random index in [0, total_tickets-1] for 1st winner
        // 2) Exclude that index, generate random index for 2nd
        // 3) Exclude that index, generate random index for 3rd
        // (For demonstration, we are not going into a perfect shuffle approach.)

        let (winner1, idx1) = pick_winner(&state.players, randomness, state.total_tickets)?;
        // Reduce total tickets for second draw
        let (winner2, idx2) = pick_winner_excluding(&state.players, randomness >> 16, idx1)?;
        // For third winner, shift randomness again
        let (winner3, _idx3) = pick_winner_excluding(&state.players, randomness >> 32, idx2)?;

        // Record winners
        state.winners.push(WinnerInfo {
            player: winner1,
            rank: 1,
            claimed: false,
            claim_deadline_epoch: state.current_epoch + CLAIM_EXPIRY_EPOCHS,
            prize_amount: 0, // will set below
        });
        state.winners.push(WinnerInfo {
            player: winner2,
            rank: 2,
            claimed: false,
            claim_deadline_epoch: state.current_epoch + CLAIM_EXPIRY_EPOCHS,
            prize_amount: 0,
        });
        state.winners.push(WinnerInfo {
            player: winner3,
            rank: 3,
            claimed: false,
            claim_deadline_epoch: state.current_epoch + CLAIM_EXPIRY_EPOCHS,
            prize_amount: 0,
        });

        // Calculate final amounts
        let total = state.total_chrch_in_pot;
        let prize_pool = total * 90 / 100; // 90%
        let burn_amount = total * 8 / 100;  // 8%
        let owner_amount = total * 2 / 100; // 2%

        // Distribute the prize pool among winners (60%, 25%, 15%)
        let first_prize = prize_pool * 60 / 100;
        let second_prize = prize_pool * 25 / 100;
        let third_prize = prize_pool * 15 / 100;

        // Store these in winners array
        if let Some(w1) = state.winners.iter_mut().find(|w| w.player == winner1 && w.rank == 1) {
            w1.prize_amount = first_prize;
        }
        if let Some(w2) = state.winners.iter_mut().find(|w| w.player == winner2 && w.rank == 2) {
            w2.prize_amount = second_prize;
        }
        if let Some(w3) = state.winners.iter_mut().find(|w| w.player == winner3 && w.rank == 3) {
            w3.prize_amount = third_prize;
        }

        // Burn 8%
        burn_tokens(
            &ctx.accounts.vault,
            &ctx.accounts.token_program,
            &ctx.accounts.lottery_state,
            burn_amount,
        )?;

        // Set aside 2% for owner
        state.owner_escrow += owner_amount;

        // Mark VRF as complete
        state.vrf_in_progress = false;
        state.draw_executed = true;

        emit!(DrawExecuted {
            epoch: state.current_epoch,
            winner1,
            winner2,
            winner3,
        });

        Ok(())
    }

    /// Users call this to claim their prize within 100 epochs of the draw.
    pub fn claim_prize(ctx: Context<ClaimPrize>) -> Result<()> {
        let state = &mut ctx.accounts.lottery_state;
        let current_epoch = state.current_epoch; // Provided off-chain or via a separate account

        // Find if this user is a winner
        if let Some(winner) = state
            .winners
            .iter_mut()
            .find(|w| w.player == ctx.accounts.user.key() && !w.claimed)
        {
            // Check if within claim period
            if current_epoch > winner.claim_deadline_epoch {
                // Burn winner's tokens
                burn_tokens(
                    &ctx.accounts.vault,
                    &ctx.accounts.token_program,
                    &ctx.accounts.lottery_state,
                    winner.prize_amount,
                )?;
                winner.claimed = true;
                emit!(PrizeBurned {
                    epoch: current_epoch,
                    player: ctx.accounts.user.key(),
                    amount: winner.prize_amount,
                });
                return err!(LotteryError::PrizeExpired);
            }

            // Transfer prize to user
            token::transfer(
                ctx.accounts.transfer_ctx(),
                winner.prize_amount,
            )?;
            winner.claimed = true;

            emit!(PrizeClaimed {
                epoch: current_epoch,
                player: ctx.accounts.user.key(),
                amount: winner.prize_amount,
            });
        } else {
            return err!(LotteryError::NoPrizeAvailable);
        }

        Ok(())
    }

    /// Anyone can call this to withdraw the 2% for the owner. The tokens go to the owner's token account.
    pub fn withdraw_owner_funds(ctx: Context<WithdrawOwnerFunds>) -> Result<()> {
        let state = &mut ctx.accounts.lottery_state;
        let amount = state.owner_escrow;
        if amount == 0 {
            return Ok(());
        }

        // Transfer from vault to owner's token account
        token::transfer(
            ctx.accounts.transfer_ctx(),
            amount,
        )?;

        // Zero out the escrow
        state.owner_escrow = 0;

        emit!(OwnerWithdrawn {
            owner: state.owner,
            amount,
        });

        Ok(())
    }

    /// Utility function to move from one epoch to the next. 
    /// In practice, your off-chain keeper will supply the new epoch.
    pub fn advance_epoch(ctx: Context<AdvanceEpoch>, new_epoch: u64) -> Result<()> {
        let state = &mut ctx.accounts.lottery_state;
        state.current_epoch = new_epoch;
        Ok(())
    }

}

// ---------------------------
//  Context Structs
// ---------------------------

#[derive(Accounts)]
pub struct BuyTicket<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    /// CHECK: We only compare pubkey to ensure it matches CHRCH_MINT_PUBKEY
    pub chrch_mint: AccountInfo<'info>,

    #[account(
        mut,
        constraint = deposit_token_account.owner == user.key(),
    )]
    pub deposit_token_account: Account<'info, TokenAccount>,

    #[account(
        mut,
        constraint = vault.mint == chrch_mint.key(),
    )]
    pub vault: Account<'info, TokenAccount>,

    #[account(
        mut,
        seeds = [b"lottery-state".as_ref()],
        bump = lottery_state.bump,
    )]
    pub lottery_state: Account<'info, LotteryState>,

    pub token_program: Program<'info, Token>,
}

impl<'info> BuyTicket<'info> {
    pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        CpiContext::new(
            self.token_program.to_account_info(),
            Transfer {
                from: self.deposit_token_account.to_account_info(),
                to: self.vault.to_account_info(),
                authority: self.user.to_account_info(),
            },
        )
    }
}

#[derive(Accounts)]
pub struct RequestDraw<'info> {
    #[account(mut)]
    pub user: Signer<'info>, // The keeper or anyone authorized to call
    #[account(
        mut,
        seeds = [b"lottery-state".as_ref()],
        bump = lottery_state.bump,
    )]
    pub lottery_state: Account<'info, LotteryState>,

    #[account(
        mut,
        constraint = vault.mint == lottery_state.chrch_mint.key(),
    )]
    pub vault: Account<'info, TokenAccount>,

    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct FulfillRandomness<'info> {
    #[account(mut)]
    pub vrf_provider: Signer<'info>, // Chainlink VRF program or callback authority
    #[account(
        mut,
        seeds = [b"lottery-state".as_ref()],
        bump = lottery_state.bump,
    )]
    pub lottery_state: Account<'info, LotteryState>,

    #[account(
        mut,
        constraint = vault.mint == lottery_state.chrch_mint.key(),
    )]
    pub vault: Account<'info, TokenAccount>,

    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct ClaimPrize<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(
        mut,
        constraint = user_token_account.owner == user.key(),
    )]
    pub user_token_account: Account<'info, TokenAccount>,

    #[account(
        mut,
        constraint = vault.mint == lottery_state.chrch_mint.key(),
    )]
    pub vault: Account<'info, TokenAccount>,

    #[account(
        mut,
        seeds = [b"lottery-state".as_ref()],
        bump = lottery_state.bump,
    )]
    pub lottery_state: Account<'info, LotteryState>,

    pub token_program: Program<'info, Token>,
}

impl<'info> ClaimPrize<'info> {
    pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        CpiContext::new(
            self.token_program.to_account_info(),
            Transfer {
                from: self.vault.to_account_info(),
                to: self.user_token_account.to_account_info(),
                authority: self.lottery_state.to_account_info(),
            },
        )
    }
}

#[derive(Accounts)]
pub struct WithdrawOwnerFunds<'info> {
    #[account(
        mut,
        seeds = [b"lottery-state".as_ref()],
        bump = lottery_state.bump,
        has_one = vault,
        has_one = owner
    )]
    pub lottery_state: Account<'info, LotteryState>,

    /// The owner does not have to be the signer; 
    /// the call can be made by anyone, but the tokens will go to the owner's account.
    #[account(mut)]
    pub owner: Signer<'info>,

    #[account(
        mut,
        constraint = owner_token_account.owner == owner.key(),
    )]
    pub owner_token_account: Account<'info, TokenAccount>,

    #[account(
        mut,
        constraint = vault.mint == lottery_state.chrch_mint.key(),
    )]
    pub vault: Account<'info, TokenAccount>,

    pub token_program: Program<'info, Token>,
}

impl<'info> WithdrawOwnerFunds<'info> {
    pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        CpiContext::new(
            self.token_program.to_account_info(),
            Transfer {
                from: self.vault.to_account_info(),
                to: self.owner_token_account.to_account_info(),
                authority: self.lottery_state.to_account_info(),
            },
        )
    }
}

#[derive(Accounts)]
pub struct AdvanceEpoch<'info> {
    #[account(mut)]
    pub user: Signer<'info>, // Keeper or admin that sets the epoch
    #[account(
        mut,
        seeds = [b"lottery-state".as_ref()],
        bump = lottery_state.bump,
    )]
    pub lottery_state: Account<'info, LotteryState>,
}

// ---------------------------
//  State & Helper Structs
// ---------------------------

#[account]
pub struct LotteryState {
    pub bump: u8,
    pub owner: Pubkey,
    pub chrch_mint: Pubkey,

    pub current_epoch: u64,
    pub total_tickets: u64,
    pub total_chrch_in_pot: u64,

    // Funds waiting for owner to withdraw
    pub owner_escrow: u64,

    // Player list for the current cycle
    pub players: Vec<PlayerInfo>,

    // Winners for the current cycle
    pub winners: Vec<WinnerInfo>,

    // Whether VRF is in progress
    pub vrf_in_progress: bool,
    // Whether the draw is executed (to ensure only 1 draw per cycle)
    pub draw_executed: bool,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct PlayerInfo {
    pub player: Pubkey,
    pub tickets: u64,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct WinnerInfo {
    pub player: Pubkey,
    pub rank: u8,  // 1,2,3
    pub claimed: bool,
    // epoch after which claim is invalid
    pub claim_deadline_epoch: u64,
    // how many tokens to receive
    pub prize_amount: u64,
}

// ---------------------------
//  Events
// ---------------------------

#[event]
pub struct DrawCancelled {
    pub epoch: u64,
    pub burned_amount: u64,
}

#[event]
pub struct DrawExecuted {
    pub epoch: u64,
    pub winner1: Pubkey,
    pub winner2: Pubkey,
    pub winner3: Pubkey,
}

#[event]
pub struct PrizeClaimed {
    pub epoch: u64,
    pub player: Pubkey,
    pub amount: u64,
}

#[event]
pub struct PrizeBurned {
    pub epoch: u64,
    pub player: Pubkey,
    pub amount: u64,
}

#[event]
pub struct OwnerWithdrawn {
    pub owner: Pubkey,
    pub amount: u64,
}

// ---------------------------
//  Helper Methods
// ---------------------------

fn burn_tokens(
    vault: &Account<TokenAccount>,
    token_program: &Program<Token>,
    state: &Account<LotteryState>,
    amount: u64,
) -> Result<()> {
    if amount == 0 {
        return Ok(());
    }
    // Transfer to a burn address. 
    // Alternatively, use anchor_spl::token::burn if the program has the burn authority.
    let cpi_ctx = CpiContext::new(
        token_program.to_account_info(),
        Transfer {
            from: vault.to_account_info(),
            to: AccountInfo::new(
                &Pubkey::try_from(CHRCH_BURN_ADDRESS).unwrap(),
                false,
                false,
            ),
            authority: state.to_account_info(),
        },
    );

    token::transfer(cpi_ctx, amount)?;
    Ok(())
}

fn reset_state(state: &mut Account<LotteryState>) -> Result<()> {
    state.total_tickets = 0;
    state.total_chrch_in_pot = 0;
    state.vrf_in_progress = false;
    state.draw_executed = false;
    state.players.clear();
    state.winners.clear();
    Ok(())
}

/// Picks a winner using the `randomness` modulo `total_tickets`.
fn pick_winner(
    players: &Vec<PlayerInfo>,
    randomness: u64,
    total_tickets: u64,
) -> Result<(Pubkey, u64)> {
    if total_tickets == 0 {
        return err!(LotteryError::InsufficientTickets);
    }
    let winning_ticket = randomness % total_tickets;
    let mut cumulative = 0u64;
    for player_info in players {
        cumulative += player_info.tickets;
        if winning_ticket < cumulative {
            return Ok((player_info.player, winning_ticket));
        }
    }
    // Fallback
    return err!(LotteryError::RngFailure);
}

/// Picks a new winner excluding the `excluded_ticket_idx`.
fn pick_winner_excluding(
    players: &Vec<PlayerInfo>,
    randomness: u64,
    excluded_idx: u64,
) -> Result<(Pubkey, u64)> {
    // We'll need to recalc total tickets minus 1.
    let mut total_tickets = 0u64;
    for p in players {
        total_tickets += p.tickets;
    }
    let new_total = total_tickets.checked_sub(1).ok_or(LotteryError::InsufficientTickets)?;
    let winning_ticket = randomness % new_total;

    // If winning_ticket is below the excluded_idx, same logic as above.
    // If it's above excluded_idx, shift by 1.
    let final_ticket = if winning_ticket < excluded_idx {
        winning_ticket
    } else {
        winning_ticket + 1
    };

    let mut cumulative = 0u64;
    for player_info in players {
        cumulative += player_info.tickets;
        if final_ticket < cumulative {
            return Ok((player_info.player, final_ticket));
        }
    }
    return err!(LotteryError::RngFailure);
}
